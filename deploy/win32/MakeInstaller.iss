; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

;#include "services.iss"

#define MyService "ServerBridge"
#define MyAppName "ACS-Embrace Server Bridge"
#define MyAppExeName "EmbraceServerBridge.exe"
#define MyAppVersion "1.5.8"
#define MyAppPublisher "Associated Computer Solutions"
#define MyAppURL "http://www.embrace.co.za"
#define MyAppVersionScored StringChange(MyAppVersion, ".", "_")

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{E8B68A59-225B-48BE-AEDB-8E6F61C7E302}}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\ACS\ServerBridge
DefaultGroupName=ACS-Embrace
UsePreviousGroup=no
OutputBaseFilename=embrace_server_bridge-{#MyAppVersionScored}-windows-x64
Compression=lzma
SolidCompression=yes
InfoBeforeFile=LICENCE.txt
WizardSmallImageFile=EmbraceBridge-setup-icon.bmp
SetupIconFile=acssphere.ico
WizardImageFile=LeftWizardImage.bmp
AppMutex=ServerBridgeMutex
UninstallDisplayIcon={app}\{#MyAppExeName}
AlwaysRestart = yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Icons]
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
;Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon


;IconFilename: "{app}\myicon.ico"
 ;IconFilename: "{app}\EmbraceBridgeClient-setup-icon.ico"

[Dirs]
Name: "{app}\app\preferences"; Permissions: users-modify;
                    
[Files]
Source: "bundle\bundles\EmbraceServerBridge\*";DestDir: "{app}"; Flags: ignoreversion recursesubdirs
Source: "COPYING";DestDir: "{app}"; 


[Tasks]
;Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked


[Run]
;Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent
;Filename: "sc.exe"; Parameters: "create serverbridge start= auto DisplayName= EmbraceServerBridge binPath= ""{app}\{#MyAppExeName}"""; Flags: runhidden 
Filename: "{app}\nssm"; Parameters: "install {#MyService} ""{app}\{#MyAppExeName}"""; Flags: runhidden
Filename: "{app}\nssm"; Parameters: "set {#MyService} DisplayName Embrace Server Bridge"; Flags: runhidden
Filename: "{app}\nssm"; Parameters: "set {#MyService} Description The server-side bridge to which Embrace client applications connect."; Flags: runhidden
Filename: "{app}\nssm"; Parameters: "set {#MyService} Start SERVICE_AUTO_START"; Flags: runhidden
;Filename: "{app}\nssm"; Parameters: "start {#MyService}"; Flags: runhidden


[UninstallRun]
Filename: "{app}\nssm"; Parameters: "stop {#MyService}"; Flags: runhidden
Filename: "{app}\nssm"; Parameters: "remove {#MyService} confirm"; Flags: runhidden
[Code]
//we need to uninstall the old version because it breaks things with java (dunno). Found this on stack overflow.
/////////////////////////////////////////////////////////////////////
function GetUninstallString(): String;
var
  sUnInstPath: String;
  sUnInstallString: String;
begin
  sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1');
  sUnInstallString := '';
  if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
  Result := sUnInstallString;
end;


/////////////////////////////////////////////////////////////////////
function IsUpgrade(): Boolean;
begin
  Result := (GetUninstallString() <> '');
end;


/////////////////////////////////////////////////////////////////////
function UnInstallOldVersion(): Integer;
var
  sUnInstallString: String;
  iResultCode: Integer;
begin
// Return Values:
// 1 - uninstall string is empty
// 2 - error executing the UnInstallString
// 3 - successfully executed the UnInstallString

  // default return value
  Result := 0;

  // get the uninstall string of the old app
  sUnInstallString := GetUninstallString();
  if sUnInstallString <> '' then begin
    sUnInstallString := RemoveQuotes(sUnInstallString);
    if Exec(sUnInstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then
      Result := 3
    else
      Result := 2;
  end else
    Result := 1;
end;

/////////////////////////////////////////////////////////////////////
procedure CurStepChanged(CurStep: TSetupStep);
begin
  if (CurStep=ssInstall) then
  begin
    if (IsUpgrade()) then
    begin
      UnInstallOldVersion();
    end;
  end;
end;











